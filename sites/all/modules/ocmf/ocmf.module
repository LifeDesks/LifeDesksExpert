<?php
// $Id: ocmf.module,v 1.2.2.3 2008/12/03 18:43:45 nunoveloso18 Exp $

/**
 * @file
 * @brief Content management filter module file
 * 
 * This file contains all the common functions used by the module.
 *
 * @attention Copyright (C) 2008 Nuno Veloso <nunoveloso18 (at) gmail (dot) com>
 * @author Nuno Andr√© Veloso Matias (http://www.nunoveloso.org)
 *
 * @warning For more information on licensing, read the LICENCE.txt file.
 */

/**
 * Implementation of hook_help().
 */
function ocmf_help($path, $arg) {

  $output = '';

  switch ($section) {

    case "admin/help#ocmf":

      $output .= '<p>'.  t('This module adds an easier way for administrators to filter the 
        content on a Drupal site that may have been orphaned because a term it has been linked to has been deleted.') .'</p>';

      break;
  }
  return $output;
} 


/**
 * Implementation of hook_perm().
 */
function ocmf_perm() {
  return array('filter and manage orphaned content');
}

/** 
 * Implementation of hook_theme().
 *
 * @ingroup themable
 */ 
function ocmf_theme() { 
  return array(
    'ocmf_taxa_filter_form' => array(
      'arguments' => array('form' => NULL)
    ),
    'ocmf_taxa_admin_form' => array(
      'arguments' => array('form' => NULL)
    ),
    'ocmf_chapters_filter_form' => array(
      'arguments' => array('form' => NULL)
    ),
    'ocmf_chapters_admin_form' => array(
      'arguments' => array('form' => NULL)
    ),
    'ocmf_user' => array(
      'arguments' => array('uid' => NULL)
    ),
    'ocmf_type' => array(
      'arguments' => array('type' => NULL)
    ),
  );
}

/**
 * Access callback for user account editing.
 */
function ocmf_edit_access($account) {
  return ($GLOBALS['user']->uid == $account->uid) && $account->uid > 0 || $GLOBALS['user']->uid == 1;
}

/**
 * Implementation of hook_menu().
 */
function ocmf_menu() {
    $items = array();

    $items['user/%user/ocmf'] = array(
        'title' => t('Orphaned Content'),
        'page callback' => 'ocmf_admin_page',
        'page arguments' => array('taxa'),
        'access callback' => 'ocmf_edit_access',
        'access arguments' => array(1), 
        'type' => MENU_LOCAL_TASK,
    );
    
    $items['user/%user/ocmf/taxa'] = array(
        'title' => t('Deleted Taxa'),
        'page callback' => 'ocmf_admin_page',
        'page arguments' => array('taxa'),
        'access callback' => '_ocmf_userspace_perms',
        'access arguments' => array('filter and manage orphaned content'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
    );
    
    $items['user/%user/ocmf/chapters'] = array(
        'title' => t('Deleted Chapters'),
        'page callback' => 'ocmf_admin_page',
        'page arguments' => array('chapters'),
        'access callback' => '_ocmf_userspace_perms',
        'access arguments' => array('filter and manage orphaned content'),
        'type' => MENU_LOCAL_TASK,
        'weight' => -9,
    );
    
    $items['user/%user/ocmf/chapters/%/edit/%'] = array(
        'title' => t('Edit Orphaned Content'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ocmf_chapters_form',1,4,6),
        'access arguments' => array('filter and manage orphaned content'),
        'type' => MENU_CALLBACK,
        'file' => 'ocmf.chapters.inc',
    );
    
    $items['user/%user/ocmf/taxa/%/edit/%'] = array(
        'title' => t('Edit Orphaned Content'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ocmf_taxa_form',1,4,6),
        'access arguments' => array('filter and manage orphaned content'),
        'type' => MENU_CALLBACK,
        'file' => 'ocmf.taxa.inc',
    );

  return $items;
}


module_load_include('inc', 'ocmf', 'ocmf.chapters');
module_load_include('inc', 'ocmf', 'ocmf.taxa');

/**
 * @return the HTML generated from the $form data structure
 */ 
function ocmf_admin_page($type = 'taxa') {

  if (arg(0) == 'user' && is_numeric(arg(1)) && arg(1) > 0) {
    $true = TRUE;
    $fullname = db_fetch_object(db_query("SELECT givenname, surname from {users} where uid = %d", arg(1)));
    drupal_set_title($fullname->givenname . ' ' . $fullname->surname);
  }

  $output  = drupal_get_form('ocmf_' . $type . '_filter_form', $true);
  $output .= drupal_get_form('ocmf_' . $type . '_admin_form');

  return $output;
}

/**********************
*  FILTERS            *
**********************/ 

/**
 * Defines the form for content administration filters.
 *
 * @ingroup forms
 * @see ocmf_chapters_filter_form_submit()
 * 
 * @param (optional) true if the filter to be built serves the user profile page
 * @return array with forms properties 
 */
function ocmf_chapters_filter_form(&$form_state, $true = NULL) {
  $session = &$_SESSION['ocmf_chapters_overview_filter'];
  $session = is_array($session) ? $session : array();

  // general settings display (max rows & content kind)
  $form['general'] = array('#type' => 'fieldset',
    '#title' => t('General Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ); 
  $form['general']['max-rows'] = array(
    '#type' => 'textfield', 
    '#title' => t('Max rows'),
    '#size' => 5,
    '#default_value' => isset($_SESSION['ocmf_chapters_max_rows']) ? $_SESSION['ocmf_chapters_max_rows'] : 50,
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['general']['buttons']['apply'] = array(
    '#type' => 'submit', 
     '#value' => t('Apply'),
  );

  return $form;
}


/** 
 * Handle post-validation form submission.
 *
 * @ingroup forms
 * @see ocmf_filter_form($form_state, )
 *
 * @param the ID of the passed form
 * @param array with the form properties values
 */ 
function ocmf_chapters_filter_form_submit($form, &$form_state) {

  switch ($form_state['values']['op']) {
    case t('Filter'):
    case t('Refine'):
    
      if (isset($form_state['values']['filter'])) {
        $filter = $form_state['values']['filter'];

        // Flatten the options array to accommodate hierarchical/nested options.
        $flat_options = form_options_flatten($filters[$filter]['options']);

        if (isset($flat_options[$form_state['values'][$filter]])) {
          $_SESSION['ocmf_chapters_overview_filter'][] = array($filter, $form_state['values'][$filter]);
        }
      }
      break;
    case t('Undo'):
      array_pop($_SESSION['ocmf_chapters_overview_filter']);
      break;
    case t('Reset'):
      $_SESSION['ocmf_chapters_overview_filter'] = array();
      break;
    case t('Apply'):
      $_SESSION['ocmf_chapters_max_rows'] = $form_state['values']['max-rows'];
      if (arg(0) == 'user' && is_numeric(arg(1)) && arg(1) > 0) {
        $form_state['redirect'] = 'user/'. arg(1) .'/ocmf/chapters';
      }
      else {
        $form_state['redirect'] = 'admin/content/filter';
      }
      break;
  }
}

/**
 * Defines the form for content administration filters.
 *
 * @ingroup forms
 * @see ocmf_filter_form_submit()
 * 
 * @param (optional) true if the filter to be built serves the user profile page
 * @return array with forms properties 
 */
function ocmf_taxa_filter_form(&$form_state, $true = NULL) {
  $session = &$_SESSION['ocmf_taxa_overview_filter'];
  $session = is_array($session) ? $session : array();
  $filters = ocmf_taxa_filters($true);

  // general settings display (max rows & content kind)
  $form['general'] = array('#type' => 'fieldset',
    '#title' => t('General Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ); 
  $form['general']['max-rows'] = array(
    '#type' => 'textfield', 
    '#title' => t('Max rows'),
    '#size' => 5,
    '#default_value' => isset($_SESSION['ocmf_taxa_max_rows']) ? $_SESSION['ocmf_taxa_max_rows'] : 50,
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['general']['buttons']['apply'] = array(
    '#type' => 'submit', 
     '#value' => t('Apply'),
  );

  $i = 0;
  $form['filters'] = array('#type' => 'fieldset',
    '#title' => t('Show only items where'),
    '#theme' => 'node_filters',
  );
  foreach ($session as $filter) {
    list($type, $value) = $filter;
    $value = $filters[$type]['options'][$value];
    $string = ($i++ ? '<em>and</em> where <strong>%a</strong> is <strong>%b</strong>' : 
        '<strong>%a</strong> is <strong>%b</strong>');
    $form['filters']['current'][] = array('#value' => t($string, 
        array('%a' => $filters[$type]['title'] , '%b' => $value)));
    // those ifs remove the respective option if it is already being filtered on.
    if ($type == 'type') {
      unset($filters['type']);
    }
  }

  // preparing select boxes
  foreach ($filters as $key => $filter) {
    $names[$key] = $filter['title'];
    $form['filters']['status'][$key] = array(
      '#type'    => 'select', 
      '#options' => $filter['options'],
     );
  }
  // building radio buttons
  $keyz = array_keys($names);
  $form['filters']['filter'] = array(
    '#type'          => 'radios',
    '#options'       => $names,
    '#default_value' => $keyz[0],
  );
  // building buttons depending on the filter state
  $form['filters']['buttons']['submit'] = array(
    '#type'  => 'submit', 
    '#value' => (count($session) ? t('Refine') : t('Filter')),
  );
  if (count($session)) {
    $form['filters']['buttons']['undo'] = array(
      '#type'  => 'submit', 
      '#value' => t('Undo'),
    );
    $form['filters']['buttons']['reset'] = array(
      '#type'  => 'submit', 
      '#value' => t('Reset'),
    );
  }

  return $form;
}


/** 
 * Handle post-validation form submission.
 *
 * @ingroup forms
 * @see ocmf_filter_form($form_state, )
 *
 * @param the ID of the passed form
 * @param array with the form properties values
 */ 
function ocmf_taxa_filter_form_submit($form, &$form_state) {
  $filters = ocmf_taxa_filters();

  switch ($form_state['values']['op']) {
    case t('Filter'):
    case t('Refine'):
    
      if (isset($form_state['values']['filter'])) {
        $filter = $form_state['values']['filter'];

        // Flatten the options array to accommodate hierarchical/nested options.
        $flat_options = form_options_flatten($filters[$filter]['options']);

        if (isset($flat_options[$form_state['values'][$filter]])) {
          $_SESSION['ocmf_taxa_overview_filter'][] = array($filter, $form_state['values'][$filter]);
        }
      }
      break;
    case t('Undo'):
      array_pop($_SESSION['ocmf_taxa_overview_filter']);
      break;
    case t('Reset'):
      $_SESSION['ocmf_taxa_overview_filter'] = array();
      break;
    case t('Apply'):
      $_SESSION['ocmf_taxa_max_rows'] = $form_state['values']['max-rows'];
      
      if (arg(0) == 'user' && is_numeric(arg(1)) && arg(1) > 0) {
        $form_state['redirect'] = 'user/'. arg(1) .'/ocmf';
      }
      else {
        $form_state['redirect'] = 'admin/content/filter';
      }
      break;
  }
}

/**
 * List node administration filters that can be applied.
 *
 * @param (optional) true if the filter to be built serves the user profile page
 * @return array with filter properties
 */
function ocmf_taxa_filters($true = NULL) {
  // Regular filters
  $filters['status'] = array('title' => t('status'),
    'options' => array('status-1'   => t('published'),     'status-0' => t('unpublished')));
  $filters['type'] = array('title' => t('type'), 'options' => node_get_types('names'));
  return $filters;
}


/**********************
*  QUERIES            *
**********************/

/** 
 * Build the variable parts of the query to be performed regarding the filter status.
 *
 * @return associative array with WHERE JOIN query parts and respective arguments
 */ 
function ocmf_taxa_filter_query() {

  $filters = ocmf_taxa_filters();

  // Build query
  $where = $args = array();
  $join = '';

  if(CLASSIFICATION_LOST_FOUND) {
    $where[] = 'td.vid = ' . CLASSIFICATION_DELETIONS . ' OR td.vid = ' . CLASSIFICATION_LOST_FOUND;
  }
  else {
    $where[] = 'td.vid = ' . CLASSIFICATION_DELETIONS;
  }

  foreach ($_SESSION['ocmf_taxa_overview_filter'] as $index => $filter) {
    list($key, $value) = $filter;
    switch ($key) {
      case 'status':
        list($key, $value) = explode('-', $value, 2);
        $where[] = 'n.'. $key .' = %d';
        break;
      case 'type':
        $where[] = "n.type = '%s'";
        break;
    }
    $args[] = $value;
  }
  $where = count($where) ? 'WHERE '. implode(' AND ', $where) : '';

  return array('where' => $where, 'join' => $join, 'args' => $args);
}

function ocmf_taxa_build_header() {

  $header[] = theme('table_select_header_cell');
  $header[] = array('data' => t('Deleted Taxon'), 'field' => 'taxon');
  $header[] = array('data' => t('Title'), 'field' => 'title');
  $header[] = array('data' => t('Type'), 'field' => 'type');
  $header[] = array('data' => t('Language'), 'field' => 'language');
  $header[] = array('data' => t('Status'), 'field' => 'status');
  $header[] = array('data' => t('Operations'));
  
  return $header;
}

/** 
 * Permform adjusted query.
 *
 * @param array respecting tablesort_sql()
 * @return result of permormed query
 */ 
function ocmf_taxa_perform_query($header) { 

  global $user;

  $filter = ocmf_taxa_filter_query();

  if (arg(0) == 'user' && is_numeric(arg(1)) && arg(1) > 0) {
    $filter['where'] .= ' AND n.uid = '. arg(1);
  }

  $qrycount = 'SELECT COUNT(td.tid) FROM {term_data} td INNER JOIN {term_node} tn ON (td.tid = tn.tid) INNER JOIN {node} n ON (tn.nid = n.nid) ' . $filter['join'] . $filter['where'];

    return pager_query('
      SELECT n.nid, n.title, n.type, n.status, n.language, td.name as taxon, td.tid
      FROM {node} n INNER JOIN {term_node} tn ON (n.nid = tn.nid) INNER JOIN {term_data} td ON (tn.tid = td.tid) '. $filter['join'] . 
      $filter['where'] . 
      tablesort_sql($header), 
      isset($_SESSION['ocmf_taxa_max_rows']) ? $_SESSION['ocmf_taxa_max_rows'] : 50, 0, $qrycount, $filter['args']
    );
}

/** 
 * Build the header of the result table for chapters.
 */ 
function ocmf_chapters_build_header() {

  $header[] = array('data' => t('Taxon'));
  $header[] = array('data' => t('Deleted Chapter'));
  $header[] = array('data' => t('Language'));
  $header[] = array('data' => t('Content'));
  $header[] = array('data' => t('Operations'));
  
  return $header;
}


/** 
 * Permform adjusted query.
 *
 * @param array respecting tablesort_sql()
 * @return result of permormed query
 */ 
function ocmf_chapters_perform_query() { 

  $qrycount = 'SELECT count(t.tid) FROM {term_data} t
                   INNER JOIN {taxon_description} td ON t.tid = td.tid_chapter
                   INNER JOIN {node} n ON td.nid = n.nid
                   WHERE n.uid = ' . arg(1) . ' AND t.vid = '. TAXON_DESCRIPTION_ORPHANED;
  return pager_query('
        SELECT t.tid, t.name as chapter, td.sid, td.nid, td.tid_taxon, td.body, n.language, n.created, n.uid
        FROM {term_data} t 
        INNER JOIN {taxon_description} td ON t.tid = td.tid_chapter 
        INNER JOIN {node} n ON td.nid = n.nid 
        WHERE n.uid = ' . arg(1) . ' AND t.vid = '. TAXON_DESCRIPTION_ORPHANED, 
        isset($_SESSION['ocmf_chapters_max_rows']) ? $_SESSION['ocmf_chapters_max_rows'] : 50, 0, $qrycount
  );
}

/**
 * Theme ocmf administration filter form.
 *
 * @themable
 */
function theme_ocmf_taxa_filter_form($form) {
  $output .= '<div id="ocmf_header">';
  $output .= drupal_render($form['general']);
  $output .= '</div>';
  $output .= '<div id="node-admin-filter">';
  $output .= drupal_render($form['filters']);
  $output .= '</div>';
  $output .= drupal_render($form);
  return $output;
}

/** 
 * Theme (node) type cell on table result.
 *
 * @ingroup themable
 *
 * @param 0 or node type key
 * @return formated (node) type
 */ 
function theme_ocmf_type($type) { 

  $result = db_query('
    SELECT name
    FROM {node_type}
    WHERE type = "%s"',
    $type
  );
  
  $content_type = db_fetch_object($result);
  
  switch($content_type->name) {
    case 'Image':
      $ocmf_class = 'image';
     break;
    case 'Taxon Page':
      $ocmf_class = 'taxon_page';
     break;
    case 'Biblio':
      $ocmf_class = 'biblio';
     break;
    case 'Forum':
      $ocmf_class = 'forum';
     break;
    case 'Poll':
      $ocmf_class = 'poll';
     break;
    case 'Shaded Map':
      $ocmf_class = 'simplemappr';
     break;
    default:
      $ocmf_class = 'default';
  }
  
  $output = '<ul class="ocmf_links"><li class="' . $ocmf_class . '"><span>' . $content_type->name . '</span></li></ul>';
  
  return $output;

}

/** 
 * Theme user cell on table result.
 *
 * @ingroup themable
 *
 * @param user ID
 * @return clickable username with status
 */ 
function theme_ocmf_user($uid) { 

  if ($uid == 0) {
    return variable_get('anonymous', NULL);
  }

  $result = db_query('
    SELECT name, status, givenname, surname
    FROM {users}
    WHERE uid = %d',
    $uid
  );

  $user = db_fetch_array($result);

  $url_alias = _ocmf_get_user_path($uid);
  
  $url = $url_alias ? $url_alias : 'user/'. $uid;

  if ($user['status']) {
    $output .= l($user['surname'] . ', ' . $user['givenname'], $url, array());
  }
  else {
    $output .= l(_ocmf_get_img('blocked', t('blocked')) .' '. $user['surname'] . ', ' .$user['givenname'], $url, array(),
      NULL, NULL, FALSE, TRUE);  
  }

  return $output; 
} 

/**
 * Builds a list of available users
 *
 * @param the format in which to return the list
 * @return array of all available users
 */
function _ocmf_get_users($op) {

  switch ($op) {
    case 'names':
      $result = db_query('
        SELECT uid, name, surname
        FROM {users}
        WHERE uid != 0
        ORDER BY name'
      );

      break;
  }
  
  $users    = array();
  $users[0] = variable_get('anonymous', NULL);

  while ($user = db_fetch_object($result)) {
    $users[$user->uid] = $user->name;
  }
  
  return $users;
}


/**
 * Builds a list of available roles
 *
 * @param the format in which to return the list
 * @return array of all available roles
 */
function _ocmf_get_roles($op) {

  switch ($op) {
    case 'names':
      $result = db_query('
        SELECT *
        FROM {role}
        ORDER BY name'
      );

      break;
  }

  $roles = array();

  while ($role = db_fetch_object($result)) {
    $roles[$role->rid] = $role->name;
  }
  
  return $roles;
}


/**
 * Get the html code of an image
 *
 * @param the pretended image
 * @return html tag img
 */
function _ocmf_get_img($action, $title) {

  $path =  base_path() . drupal_get_path('module', 'ocmf') .'/images/'. $action .'.png';

  if ($title == NULL) {
    $html = '<img src="'. $path .'" alt="untitled image" />';
  }
  else {
    $html = '<img src="'. $path .'" title="'. $title .'" alt="'. $title .'" />';
  }

  return $html;
}

/** 
 * Get the alias path to a user profile
 *
 * @param user ID
 * @return the relative URL of the user profile
 */
function _ocmf_get_user_path($uid) {

  return db_result(db_query('
    SELECT dst
    FROM {url_alias}
    WHERE src = "%s";',
    'user/'. $uid
  ));
}


/** 
 * Check user permissions to see menu item under example.com/user/UID/ocmf
 *
 * @param access strings
 * @param access strings
 * @return boolean
 */
function _ocmf_userspace_perms($manage_access) {
  return (user_access($manage_access));
}