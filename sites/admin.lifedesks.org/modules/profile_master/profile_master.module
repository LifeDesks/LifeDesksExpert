<?php

function profile_master_perm() {
  return array('access profile master');
}

function profile_master_menu() {
  $items = array();

  $items['profile_master'] = array(
    'title' => 'Profile master',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile_master_form',),
    'access arguments' => array('access profile master'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function profile_master_form() {
    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Profile Title'),
        '#required' => TRUE,
        '#default_value' => t('Master'),
        '#weight' => 0,
    );
    $form['description'] = array(
        '#type' => 'textarea',
        '#title' => t('Profile Description'),
        '#required' => TRUE,
        '#default_value' => t('Installation profile generated automatically using Profile Master on !date', array('!date' => date('jS M Y h:ia'))),
        '#weight' => 1,
    );
    $form['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Profile Name (can only contain a-z and _)'),
        '#required' => TRUE,
        '#default_value' => t('master'),
        '#weight' => 2,
    );
    $form['export_nodetypes'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export custom node types'),
        '#default_value' => TRUE,
        '#weight' => 3,
    );
    $form['export_roles'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export roles'),
        '#default_value' => FALSE,
        '#weight' => 4,
    );
/*    $form['export_users'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export users'),
        '#default_value' => FALSE,
        '#weight' => 5,
    );
    $form['export_menus'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export menus'),
        '#default_value' => FALSE,
        '#weight' => 6,
    );*/
    $form['export_blocks'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export blocks'),
        '#default_value' => TRUE,
        '#weight' => 7,
    );
    $form['export_aliases'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export URL aliases'),
        '#default_value' => TRUE,
        '#weight' => 8,
    );
    $form['nodes'] = array(
        '#weight' => 9,
        '#type' => 'fieldset',
        '#title' => t('Nodes to export'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    node_types_rebuild();
    $types = node_get_types();
    foreach ($types as $name => $type) {
        if ($type->custom) {
            $form['nodes']['node_' . $type->type] = array(
                '#type' => 'checkbox',
                '#title' => $type->name,
                '#default_value' => FALSE,
          );
        }
    }

    $form['download'] = array(
        '#type' => 'submit',
        '#value' => t('Download'),
        '#weight' => 10,
    );
    $form['display'] = array(
        '#type' => 'submit',
        '#value' => t('Display'),
        '#weight' => 10,
		'#submit' => array('profile_master_form_display_submit'),
    );

    return $form;
}

function profile_master_serialize($var, $spaces = 4) {
    return trim(preg_replace('/^/ms', str_repeat(' ', $spaces), var_export($var, true)));
}

function profile_master_create($form,&$form_state) {

    $profile_name = $form_state['values']['name'];

    $modules = profile_master_module_list();

    $details = array(
        'name' => $form_state['values']['title'],
        'description' => $form_state['values']['description'],
    );

    $postcode = '';
    $code = "<?php\n\n";

    $code .= "// vim: filetype=php\n\n";
    
    $now = format_date(time());

    $code .= "/**
 * Installation profile.
 * This code was generated by the profile master
 * Date: $now
 *
 * This code goes in your .profile file
 */

/*
  You must include the crud.inc file in your profile.
  The file is part of the install_profile_api module.
*/
include_once('includes/crud.inc');\n\n";


    $code .= "/************************************************************\n";
    $code .= "*                           MODULES                         *\n";
    $code .= "************************************************************/\n";
    $code .= "function {$profile_name}_profile_modules() {\n";
    $code .= "    return ";
    $code .= profile_master_serialize($modules, 6);
    $code .= ";\n";
    $code .= "}\n\n";

    $code .= "/************************************************************\n";
    $code .= "*                           DETAILS                         *\n";
    $code .= "************************************************************/\n";
    $code .= "function ${profile_name}_profile_details() {\n";
    $code .= "    return ";
    $code .= profile_master_serialize($details, 6);
    $code .= ";\n";
    $code .= "}\n\n";

    $code .= "function ${profile_name}_profile_tasks() {\n";

    // variables (and theme)
    $query_result = db_query('SELECT name FROM {variable}');
    $code .= "/************************************************************\n";
    $code .= "*                          VARIABLES                        *\n";
    $code .= "************************************************************/\n";
    while ($variable = db_fetch_object($query_result)) {
        if (in_array($variable->name, array('install_profile', 'drupal_private_key', 'cron_last', 'content_schema_version'))) {
            continue;
        }
        $value = profile_master_serialize(variable_get($variable->name, null), 4);
        switch ($variable->name) {
            case 'theme_default':
                $code .= "    system_theme_data();\n";
                $code .= "    db_query(\"UPDATE {system} SET status = 0 WHERE type = 'theme'\");\n";
                $code .= "    db_query(\"UPDATE {system} SET status = 1 WHERE type = 'theme' and name = '%s'\", ". $value .");\n";
                $postcode .= "    system_initialize_theme_blocks(". $value .");\n";
                $code .= "    variable_set(". var_export($variable->name, true) .", ". $value .");\n";
                break;
		
	     case 'clean_url':
     		  $val = profile_master_serialize('1', 4);
		  $code .= "    variable_set(". var_export($variable->name, true) .", ". $val .");\n";
		  break;

	     case 'user_picture_dimensions':
     		  $val = profile_master_serialize('150x150', 4);
		  $code .= "    variable_set(". var_export($variable->name, true) .", ". $val .");\n";
		  break;

	     case 'image_max_upload_size':
     		  $val = profile_master_serialize('2048', 4);
		  $code .= "    variable_set(". var_export($variable->name, true) .", ". $val .");\n";
		  break;

	     case 'image_sizes': 
     		  $val = "array ( '_original' => array ( 'label' => 'Original', 'operation' => 'scale', 'width' => '', 'height' => '', 'link' => '2', ), 'thumbnail' => array ( 'label' => 'Thumbnail', 'operation' => 'scale', 'width' => '100', 'height' => '75', 'link' => '1', ), 'preview' => array ( 'label' => 'Preview', 'operation' => 'scale', 'width' => '460', 'height' => '345', 'link' => '1', ), )";
		  $code .= "    variable_set(". var_export($variable->name, true) .", ". $val .");\n";
		  break;

            default:
                $code .= "    variable_set(". var_export($variable->name, true) .", ". $value .");\n";
                break;
        }
    }

    $code .= "\n";

    // node types
    if ($form_state['values']['export_nodetypes']) {
        $code .= "/************************************************************\n";
        $code .= "*                         NODE TYPES                        *\n";
        $code .= "************************************************************/\n";
        
        node_types_rebuild();
        $types = node_get_types();
        foreach ($types as $type) {
	   if($type->type != 'drupal_site'){
          	$type = get_object_vars($type);
          	$code .= "    install_add_content_type(" . profile_master_serialize($type) . ");\n";
	   }
        }
        
        $code .= "\n";
    }

 
    // roles
    if ($form_state['values']['export_roles']) {
        $code .= "/************************************************************\n";
        $code .= "*                            ROLES                          *\n";
        $code .= "************************************************************/\n";
        
        $code .= "    \$role_id = array();\n";
        $result = db_query("SELECT rid, perm FROM {permission} WHERE 1");
        $permissions = array();
        while ($permission = db_fetch_object($result)) {
          $permissions[$permission->rid] = explode(',', $permission->perm); 
        }
        
        foreach (user_roles() as $role_id => $role_name) {
          $perms = profile_master_serialize($permissions[$role_id]);
          $code .= "    install_set_permissions(" . ($role_id > 2 ? "\$role_id['$role_name'] = install_add_role('$role_name')" : $role_id) . ", $perms);\n";
        }
        
        $code .= "\n";
    }

    // users
    if ($form_state['values']['export_users']) {
        $code .= "/************************************************************\n";
        $code .= "*                            USERS                          *\n";
        $code .= "************************************************************/\n";
        if ($form_state['values']['export_roles']) {
          $query_result = db_query('SELECT {users}.name AS name, {users}.pass AS pass, {users}.mail AS email, {users}.status AS status, {role}.name AS role FROM {users} LEFT JOIN {users_roles} ON {users}.uid = {users_roles}.uid LEFT JOIN {role} ON {role}.rid={users_roles}.rid WHERE {users}.uid>0 ORDER BY {users}.uid');
          $users = array();
          while ($user = db_fetch_object($query_result)) {
            if (!isset($users[$user->name])) {
              $users[$user->name] = drupal_clone($user);
              $users[$user->name]->role = array();
            }
            if (!is_null($user->role)) {
              $users[$user->name]->role[] = $user->role;
            }
          }
          foreach ($users as $user) {
            $code .= "    install_add_user('$user->name', '$user->pass', '$user->email', " . profile_master_serialize($user->role) . ", $user->status);\n";
          }
        } else {
          $query_result = db_query('SELECT * FROM {users} WHERE uid>0 ORDER BY uid');
          while ($user = db_fetch_object($query_result)) {
            $code .= "    install_add_user('$user->name', '$user->pass', '$user->email', array(), $user->status);\n";
          }
        }
        $code .= "\n";
    }

    // menus
    if ($form_state['values']['export_menus']) {
        $code .= "/************************************************************\n";
        $code .= "*                            MENUS                          *\n";
        $code .= "************************************************************/\n";
        $code .= "\n";

        $code .= "    // Primary links\n";
        $code .= "    install_menu_create_menu_items(".profile_master_serialize(profile_master_walk_menu(2)).",2);\n";
        $code .= "\n";
        $code .= "    // Other menus\n";
        $code .= "    install_menu_create_menu_items(".profile_master_serialize(profile_master_walk_menu(0,array(1,2))).",0);\n";
        $code .= "\n";
    }

    if ($form_state['values']['export_aliases']) {
        $code .= "/************************************************************\n";
        $code .= "*                         URL ALIASES                       *\n";
        $code .= "************************************************************/\n";
        $code .= "\n";
        $code .= profile_master_generate_inserts('url_alias', db_query('SELECT src,dst FROM {url_alias}'));
    }

    // blocks
    if ($form_state['values']['export_blocks']) {
        $code .= "/************************************************************\n";
        $code .= "*                           BLOCKS                          *\n";
        $code .= "************************************************************/\n";
        $code .= "\n";
        $query_result = db_query('SELECT * FROM {blocks}');
        while ($block = db_fetch_object($query_result)) {
            $code .= "    install_add_block('$block->module', '$block->delta', '$block->theme', $block->status, $block->weight, '$block->region', $block->custom, $block->throttle, $block->visibility, '$block->pages', '$block->title');\n";
        }
        if ($form_state['values']['export_roles']) {
            $query_result = db_query('SELECT * FROM {blocks_roles} INNER JOIN {role} ON {role}.rid={blocks_roles}.rid');
            while ($block_role = db_fetch_object($query_result)) {
                $code .= "    install_add_block_role('$block_role->module', '$block_role->delta', \$role_rid['$block_role->name']);\n";
            }
        }
        $code .= "\n";
    }

    $code .= profile_master_export_nodes($form_state['values']);

    $code .= "\n$postcode\n";
    $code .= "    return;\n";
    $code .= "}\n\n";

    $code .= "?>\n";

    return $code;
}

function profile_master_form_submit($form,&$form_state) {

   $code = profile_master_create($form,$form_state);

   header('Content-type: text/plain');
   header('Content-Disposition: attachment; filename="' . $form_state['values']['name'] . '.profile"');
   echo $code;

}

function profile_master_form_display_submit($form,&$form_state) {

   $code = profile_master_create($form,$form_state);

   echo theme('page', '<pre><code language="php">' . highlight_string($code, true) . '</code></pre>');

}

function profile_master_export_nodes($form_state) { 
    $output = '';
    $output .= "/************************************************************\n";
    $output .= "*                       EXPORTING NODES                     *\n";
    $output .= "************************************************************/\n";

    $query_result = db_query('SELECT * FROM {node_type}');
    while ($nodetype = db_fetch_object($query_result)) {
        if ($nodetype->custom && $form_state['values']['node_' . $nodetype->type]) {
            $output .= "    // exporting nodes of type: " . $nodetype->name . "\n";
            $output .= profile_master_generate_inserts('node', db_query("SELECT * FROM {node} WHERE type='%s'", $nodetype->type));
            $output .= profile_master_generate_inserts('node_revisions', db_query("SELECT {node_revisions}.* FROM {node_revisions} INNER JOIN {node} ON {node_revisions}.nid = {node}.nid  WHERE {node}.type='%s'", $nodetype->type));
        }
    }
    return $output;
}

function profile_master_generate_inserts($table, $result, $spaces = 4) {
    $output = '';
    while ($row = db_fetch_array($result)) {
        $output .= profile_master_generate_insert($table, $row, $spaces) . "\n";
    }
    return $output;
}

function profile_master_generate_insert($table, $data, $spaces = 4) {
    $spaces = str_repeat(' ', $spaces);
    $query = $spaces . "db_query(\n${spaces}    \"INSERT INTO {" . $table . "} (";
    $query .= join(',',array_keys($data));
    $query .= ")\n${spaces}    VALUES (";
    $query .= join(',',array_pad(array(), count($data), "'%s'"));
    $query .= ")\",\n";
    $params = array();
    foreach ($data as $value) {
        $params[] = profile_master_serialize($value);
    }
    $query .= $spaces . '    ' . join(',', $params) . "\n";
    $query .= $spaces . ');';
    return $query;
}

function profile_master_walk_menu($parent_id, $skip_mlids = array()) {
    $menu = array();

    $query_result = db_query('SELECT * FROM {menu_links} WHERE plid=%d', $parent_id);
    while ($item = db_fetch_object($query_result)) {
        $item = (array) $item;
        if ( in_array($item['mlid'], $skip_mlids)) {
            continue;
        }
        $item['children'] = profile_master_walk_menu($item['mlid']);
        unset($item['mlid']);
        unset($item['plid']);
        $menu[] = $item;
    }

    return $menu;
}


function profile_master_module_list() {
    include_once('profile_master.admin.inc');

    $modules = array();
    $module_cache = module_rebuild_cache();
    global $moduleStatus;
    foreach ($module_cache as $module) {
	$i = 0;
	if ( ! $module->status) {
       	continue;
       }
	foreach($moduleStatus as $mod => $status){
		if($mod == $module->name)
			$i++;
	}
	 
       if($i == 0){
      		$modules[] = array(
	      		'deps' => profile_master_module_dependencies($module_cache, $module->name),
	       	'name' => $module->name,
	 	);
	}
    }
    
    foreach($moduleStatus as $module => $status){
	if($status == 'TRUE'){
		$modules[] = array(
       		'deps' => profile_master_module_dependencies($module_cache, $module->name),
            		'name' => $module,
       	);
	}
    }

    
    // Re-order modules (dependencies first).
    for ( $i = 0; $i < count($modules); $i++) {
        for ( $j = 0; $j < count($modules) - 1; $j++) {
            if ($i == $j) {
                continue;
            }
            if ( in_array($modules[$i]['name'], $modules[$j]['deps'])) {
                $tmp = $modules[$j];
                $modules[$j] = $modules[$i];
                $modules[$i] = $tmp;
            }
        }
    }

    return array_map(create_function('$a', 'return $a["name"];'), $modules);
}

/**
 * Get dependencies of a module within a list of modules.
 */
function profile_master_module_dependencies($module_list, $module) {
    $deps = $module_list[$module]->info['dependencies'];

    if ( !is_array($deps)) {
        $deps = array();
    }
    
    foreach ($deps as $dep) {
        $deps = array_merge($deps, profile_master_module_dependencies($module_list, $dep));
    }

    return $deps;
}